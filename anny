import cv2
import numpy as np
from matplotlib import pyplot as plt

def covolution(image, operator):

  img_h, img_w = image.shape
  kernel_h, kernel_w = operator.shape

  padded_image = np.zeros((img_h + 2, img_w + 2))
  padded_image[1:-1, 1:-1] = image

  output = np.zeros_like(image)

  for i in range(0, img_h):
      for j in range(0, img_w):
          region = padded_image[i:i+kernel_h, j:j+kernel_w]
          output[i, j] = np.sum(region * operator)

  return output

image = cv2.imread("green-snake.jpg", 0)
#img = img.resize((128, 128))

display(plt.imshow(image, cmap='gray', vmin=0, vmax=255))
plt.axis('off')
plt.show()



print("Original Image:")
print(image)

# Sobel operator
sobel_x = np.array([[-1, 0, 1],
                    [-2, 0, 2],
                    [-1, 0, 1]])

sobel_y = np.array([[1, 2, 1],
                    [0,  0,  0],
                    [-1,  -2,  -1]])

# Prewitt operator
prewitt_x = np.array([[-1, 0, 1],
                      [-1, 0, 1],
                      [-1, 0, 1]])

prewitt_y = np.array([[1, 1, 1],
                      [0,  0,  0],
                      [-1, -1, -1]])

# Gaussian Blur
gaussian_kernel = (1/16) * np.array([
                            [1, 2, 1],
                            [2, 4, 2],
                            [1, 2, 1]
                        ])

filtered_image = covolution(image, gaussian_kernel)

print("\nFiltered Image:")
print(filtered_image)


operator_x = sobel_x
operator_y = sobel_y

# gx
G_x = covolution(filtered_image, operator_x)

print("\nGx:")
print(G_x)

# gx
G_y = covolution(filtered_image, operator_y)

print("\nGy:")
print(G_y)


# Calculating Gradient Magnitude and Direction
magnitude = np.sqrt(G_x**2 + G_y**2)
magnitude = np.round(magnitude)
print("\nMagnitude:")
print(magnitude)

direction = np.arctan2(G_y, G_x)
#direction = (direction * 180.0 / np.pi) % 180
direction = np.degrees(direction) % 180
print("\nDirection :")
print(direction)

orientation =  np.round(direction / 45) * 45
print("\nOrientation :")
print(orientation)

# Non Maximum Suppression
temp_magnitude = magnitude

for i in range(1, magnitude.shape[0]-1):
  for j in range(1, magnitude.shape[1]-1):

    if orientation[i, j] == 0 or orientation[i, j] == 180:
        if magnitude[i-1, j] > magnitude[i, j] or magnitude[i+1, j] > magnitude[i, j]:
            temp_magnitude[i, j] = 0

    elif orientation[i, j] == 45:
        if magnitude[i-1, j+1] > magnitude[i, j] or magnitude[i+1, j-1] > magnitude[i, j]:
            temp_magnitude[i, j] = 0

    elif orientation[i, j] == 135:
        if magnitude[i-1, j-1] > magnitude[i, j] or magnitude[i+1, j+1] > magnitude[i, j]:
            temp_magnitude[i, j] = 0

    elif orientation[i, j] == 90:
        if magnitude[i, j-1] > magnitude[i, j] or magnitude[i, j+1] > magnitude[i, j]:
            temp_magnitude[i, j] = 0

suppressed_image = temp_magnitude
print("\nAfter non maximum suppression:")
print(suppressed_image)


# Double Thresholding

low_threshold = 8
high_threshold = 12

edges = np.zeros_like(suppressed_image)

strong = 255

for i in range(suppressed_image.shape[0]):
    for j in range(suppressed_image.shape[1]):

        if suppressed_image[i, j] >= high_threshold:
            edges[i, j] = strong
        elif suppressed_image[i, j] <= low_threshold:
            edges[i, j] = 0
        else:
            edges[i, j] = suppressed_image[i, j]

print("\nAfter Double Thresholding:")
print(edges)

# Edge Tracking by Hysteresis
final_edges = edges.copy()

for i in range(1, edges.shape[0]-1):
    for j in range(1, edges.shape[1]-1):
        if edges[i, j] != strong:

            if ((edges[i+1, j-1] == strong) or (edges[i+1, j] == strong) or (edges[i+1, j+1] == strong)
                or (edges[i, j-1] == strong) or (edges[i, j+1] == strong)
                or (edges[i-1, j-1] == strong) or (edges[i-1, j] == strong) or (edges[i-1, j+1] == strong)):
                final_edges[i, j] = strong
            else:
                final_edges[i, j] = 0

print("\nFinal Edges after Hysteresis:")
print(final_edges)

display(plt.imshow(final_edges, cmap='gray', vmin=0, vmax=255))
plt.axis('off')
plt.show()
